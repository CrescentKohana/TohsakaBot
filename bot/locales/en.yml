en:
  welcome: "EN: TohsakaBot launched successfully!"

  bot:
    default_channel_notify: "No default channel set in 'cfg/config.yml'.
    Before sending messages through the terminal, set the channel with 'set_ch <id>'"
    channel_set: "Channel set to %{name} "

  errors:
    not_registered: "You aren't registered yet! Please do so by entering the command `?register`."
    unexpected: "An unexpected error occurred."
    nan: "Not a number."

  first_time_setup:
    required_hint: "* means required field!"
    auth_file: "Creating auth.yml"
    owner_id: "*Owner ID (Discord UserID): "
    cli_id: "*Client ID
    (found here https://discord.com/developers/applications in the General Information tab of the app): "
    bot_token: "*Bot token (found on the same page in the Bot tab of the app): "
    db_type: "*Specify database type (1 [SQLite3], 2 [MariaDB/MySQL]): "
    sqlite: "*SQLite3 database (default: tohsaka.db): "
    db_user: "*MariaDB/MySQL username: "
    db_password: "*MariaDB/MySQL password: "
    yt_apikey: "YouTube API key: "
    saucenao_apikey: "SauceNao API key: "
    auth_cfg_notice1: "# Personal keys, IDs and tokens"
    auth_cfg_notice2: "# Database"
    auth_cfg_notice3: "# DO NOT SHARE THIS FILE OR ITS CONTENTS WITH ANYONE"
    config_file: "Creating config.yml"
    default_now_playing: "Magic"
    prefix: "Preferred command prefixes separated by whitespace (default: ?): "
    locale: "Preferred language / locale of the bot (current: %{lang}, [en, jp, fi]): "
    default_channel: "*Default channel ID (notices): "
    highlight_channel: "Highlight channel ID (advanced pin system): "
    web_dir: "Directory path of TohsakaWeb like /home/rin/www/TohsakaWeb
    (optional, note for no trailing slash!): "
    web_url: "URL of TohsakaWeb like https://rin.example.com (optional): "
    mvp_role: "ID of the MVP role (optional, given to a user as a reward when they win in something): "
    fool_role: "ID of the fool role (optional, given to a user as a reward when they lose in something): "
    files_created: "Necessary directories and files created! Bot can now be started with:\nbundle exec ruby run.rb"

  async:
    load_alko:
      no_update_needed: "No update needed for data/alko.csv."
      ready: "Alko's alcohol database loaded into data/alko.csv."
    reminder:
      normal: "Reminder for %{mention}"
      repeated: "Repeated reminder for %{mention}"

  events:
    highlight:

    message_id_check:
      2: "Doubles!"
      3: "Triples!"
      4: "Quadruples!"
      5: "Quintuples!"
      6: "Sextuples!"
      7: "Septuples!"
      8: "Octuples!"
      9: "Nonuples!"
      10: "Decuples!"
      what: "What in the w√∂rld did you just get?"
    repost_overseer:
      response: "Repost!"
    squads:
      info: "**Squads:** a way to form groups. By mentioning a whitelisted role,
       five reaction buttons will be spawned to the message. Also when there's a number before the mention,
       the default squad size is overridden. Squad invite expires in 1 hour.\n\n
       ‚úÖ `Accept (every accepted user will be mentioned when the squad size is reached)`\n
       ‚ùå `Deny and mute this role for 1 hour`\n
       üö´ `Deny and mute this role for 6 hours`\n
       üîï `Deny and mute this role for 24 hours`\n
       ‚ùì `This help`\n\n
       _Adding a hashtag (#) at the start of the message will disable this functionality turning it to a normal mention._\n\n
       Roles: %{roles}"
    poll:
      vote:
        already_voted_single: "You have already voted. Total votes: %{votes}."
        already_voted_multi: "You have already voted this choice. Total votes: %{votes}."
        expiry: "This poll has expired."
        failure: "Vote failed."
        permission_error: "No permissions to end this poll."
    timeout:
      vote:
        already_voted: "You have already voted. Total votes: %{votes}."
        expiry: "This timeout vote has expired."
        failure: "Vote failed."
        permission_error: "No permissions to vote on this poll."
        successful: "%{name} has been timed out for %{duration} seconds.  Votes: `%{yes}Y to %{no}N`"
        unsuccessful: "No timeout for %{name}. Votes: `%{no}N to %{yes}Y`"

    other:
      another_roll:
      also_remindme:
      message_id_check:
      repost_overseer:
      trigger:

  commands:
    general_param:
      ephemeral_false: "Private response? Default: false"
      ephemeral_true: "Private response? Default: true"
      verbose_output: "Verbose output?"
    tool:
      description: "Various tools"
      admin:
        description: "Admin tools"
        register_slash:
          aliases: "slashregister regslash slashreg"
          description: "Registers slash commands."
          usage: "registerslash <top-level commands separated by space>"
          response: "Registered top-level commands: "
          param:
            types: "Top-level commands separated by space"
          error:
            not_found: "Given top-level commands weren't found."
        eval:
          description: "Run Ruby code. Only for the owner."
          usage: "eval <code (multiline allowed)>"
          param:
            code: "Ruby code"
        set_status:
        edit_permissions:
          aliases: "permissionsedit editperm permedit setpermissions permissionsset setperm permset"
          description: "Edits the permission level of a given user."
          usage: "editpermissions <discord uid | mention> <level (0-999)>"
          response: "Permission level of %{level} set for %{username}."
          param:
            user: "Discord user"
            level: "Permission level (0-999)"
          error:
            user_not_found: "The user doesn't exist."
            level_not_in_range: "Permission level range: 0 - 999."
            failed: "Failed to set permissions for %{username}."
        convert_pins:
        message_prune:
        emoji_list:
          description: "List all the emoji bot has at its disposal."
        slow_mode:
          aliases: "setslowmode"
          description: "Sets slow mode for specified channels"
          usage: "slowmode <rate (0-21600s> <channel ids ('all' for every channel in the server)>"
          response:
            set: "%{rate}s slow mode set for %{channels} channels."
            clear: "Slow mode cleared for %{channels} channels."
          error:
            channel_not_found: "Specified channels not found."
        timeout:
          aliases: "complain mute votemute mutevote timeoutvote votetimeout"
          description: "Creates a vote to mute (timeout) a member."
          usage: "timeout <user mention> <seconds (10-3600, default 30)>"
          message: "Timeout <@!%{member_id}> for %{duration}s? `Votes: %{votes}`"
          invalid_member: "Unexpected error. The user might not be on the server anymore."
          in_progress: "A vote for this user is already in progress."
          param:
            user: "A user in this server (mention if txt command)."
            duration: "10 to 3600 seconds."
      user:
        description: "User tools"
        set_lang:
          aliases: "langset setlanguage languageset setlocale localeset"
          description: "Sets the language used in the bot for the user."
          usage: "setlang <fi, en, ja>"
          response: "Language set to English."
          param:
            lang: "Language"
          error:
            locale_not_found: "Specified language not found."
        set_birthday:
          aliases: "birthdayset birthday setbd bdset setdob dobset"
          description: "Sets user's birthday for the bot to congratulate them."
          usage: "setbirthday <date (e.g. YYYY-MM-DD or DD-MM-YYYY, 0 for clearing, separators include -/.)> <time (optional, hh:ss, default 09:00)>"
          response: "Birthday set to %{date}."
          clear: "Birthday cleared."
          param:
            lang: "Date"
          error:
            invalid_date: "Parsing date failed."
        register:
          description: "Register yourself."
          response: "You've been successfully registered!"
          error:
            found: "You've already been registered!"
        info:
          aliases: "infouser"
          description: "Returns information about a Discord user."
          usage: "userinfo <user (id | mention) | nothing for info about yourself>"
          response: ""
          param:
            user: "Discord user"
          error:
            not_found: "User not found"
        private_prune:
          aliases: "pmprune prunepm pruneprivate"
          description: "Prune bot's private messages. Messages older than 2 weeks won't be deleted as per Discord's limits."
          usage: "privateprune <amount (2 - 100)>"
          response: "Successfully pruned %{deleted_count} bot messages."
          error:
            only_pm: "This command works only in private messages."
      help:
        description: "Returns a list of all commands or help for a specific command."
        usage: "help <command name>"
        param:
          command: "Command name"
      ping:
        description: "Pong!"
        usage: "ping"
        response: "Pong!"
        edited_response: "Pong! Bot <-> API RTT: `%{time}ms`"
      feature:
        description: "Feature requests for the bot"
        request:
          aliases: "fr requestfeature request"
          description: "Takes an idea and saves it."
          usage: "fr <description of a feature or an improvement>"
          param:
            description: "A description of a feature or an improvement"
          error:
            request_amount: "The maximum amount of active feature requests a user can have is 1000."
        find:
          aliases: "findfrs findfr findfeaturerequest ffr requests frs frlist listfr"
          description: "Finds and lists feature requests based on given tags."
          usage: "ffr <tags (new, indev, done, wontdo, all)>"
          param:
            tag: "Tag (default all)"
        tag:
          aliases: "tagfr"
          description: "Tags a feature request. Currently all tags are exclusive from each other."
          usage: "tag <id> <tag (new, indev, done, wontdo)>"
          param:
            id: "ID of a request"
            tag: "Tag"

    utility:
      description: "Various utility commands"
      roll_probability:
        description: "Returns the probability of getting k hits within n amount of rolls with the chance of p (%)."
        param:
          chance: "Chance (%) of one roll getting a hit"
          rolls: "Tried rolls (n)"
          hits: "Successful hits (k)"
      poll:
        aliases: "vote"
        description: "Creates polls. If only question is specified, 1 minute poll with ‚úÖ and ‚ùå options will be created."
        usage: "poll -h or --help for help."
        default_question: "Pick your poison"
        help:
          banner: "Usage: poll [options]"
          question: "Question for the poll."
          choices: "Poll choices. Separated by semicolon: `;`. Maximum amount of choices: 24."
          duration: "After how long (10s-24h) the poll will expire automatically. Manual end is disabled. s or nothing: seconds, m: minutes, h: hours, 0 for manual"
          multi: "If present, users are allowed to vote on more than one choice."
          template: "Poll template. If specified, choices will be ignored."
          type: "Poll type: button (default), emoji or dropdown"
          extra_help: ""
        param:
          question: "Question for the poll."
          choices: "Poll choices. Separated by semicolon: `;`. Maximum amount of choices: 24."
          duration: "After how long (10s-24h) the poll will expire. Manual end disabled. s: seconds, m: minutes, h: hours"
          multi: "Are users are allowed to vote on more than one choice? Default: false"
          template: "Poll template."
          type: "Poll type. Default: button"
      alko:
      alko_list:
      get_sauce:
        aliases: "saucenao sauce source getsource"
        description: "Tries to find the source for the posted image."
        usage: "getsauce <link (or attachment)>"
        param:
          link: "Direct link to the image"
      quickie:
        aliases: "qm"
        description: "A quick message which is deleted after n seconds."
        usage: "quickie <1-10 (seconds as int; default 5)> <message>"
        param:
          message: "Message to send"
          duration: "Seconds (1-10, default 5)"
      encode_message:
        aliases: "encodemessage encode üîí spoiler spoilers"
        description: "Encode a message"
        usage: "encode <algorithm (rot13)> <message>"
        param:
          message: "Message to send"
          algorithm: "Algorithm to use. Default rot13"
      drink:
        description: "Alcohol and other drinks"
        alko:
          description: "Recommends drinks from Alko (a Finnish alcohol store) based on budget and type."
          usage: "alko <max price in euros (integer, <= %{max_budget}‚Ç¨)> <type>"
          param:
            budget: "Max budget"
            type: "Type of the drink"
        alkolist:
          description: "Lists all drink types for alko command."

    fun:
      description: "Entertainment"
      coinflip:
        aliases: "coin flip toss flop"
        description: "Flips a coin"
        usage: "flip <integer (default 1)>"
        role_reward_reason: "Flipped a coin on its edge"
        outcome:
          tails: "Tails"
          heads: "Heads"
          edge: "The coin landed on its edge"
        param:
          times: "Times to do a coinflip (default 1)"
        error:
          times: "Maximum amount of flips: 100000."
      number:
        aliases: "numbers num single singles"
        description: "A random number from given range (limits: -100000000 - 100000000)"
        usage: "number <start> <end> (default 0-9)"
        param:
          start: "Range start (default 0)"
          end: "Range end (default 9)"
        error:
          range: "Don't break the bot! Range limits: -100000000 - 100000000."
      doubles:
        aliases: ""
        description: ""
        usage: ""
        param:
      triples:
        aliases: ""
        description: ""
        usage: ""
        param:
      quads:
        aliases: ""
        description: ""
        usage: ""
        param:
      quints:
        aliases: ""
        description: ""
        usage: ""
        param:
      fgo:
        aliases: "fgosummon summonfgo"
        description: "Returns probabilities of different summons in Fate/Grand Order."
        usage: "fgosummon <amount of currency as int (default 30)> <currency type (SQ (default), JPY, USD or R (rolls))>
               <verbose (y/N)>"
        param:
          currency: "Currency type (default SQ)"
          amount: "Amount of currency (default 11)"
        error:
          type: 'Accepted currency types: SQ, JPY, USD or R (rolls).'
      neko:
        aliases: ""
        description: ""
        usage: ""
        param:
      icecube_machine:
        aliases: ""
        description: ""
        usage: ""
        param:
      chaos:
        aliases: "mock"
        description: "Convert text to chaos/mock style. eXaMpLe MeSsAgE"
        usage: "chaos <msg>"
        param:
          txt: "Text to convert"
      martus:
        aliases: "markus"
        description: "Convert text to martus style. k, c -> t with caps."
        usage: "martus <msg>"
        param:
          txt: "Text to convert"
      rockpaperscissors:
        aliases: "rockpaperscissors"
        description: "Rock paper scissors. Without tag the first one to click to button will be the challenged."
        usage: "rps <user tag>"
        response:
          pick: "Picked %{choice}."
          already_picked: "You have already picked %{choice}."
          in_progress: "Game already in progress."
        choice:
          c0: "Rock"
          c1: "Paper"
          c2: "Scissors"
        outcome:
          win: "<@!%{winner}> (%{win_choice}) wins against <@!%{loser}> (%{lose_choice})!"
          tie: "Tie between <@!%{p1}> & <@!%{p2}> (%{choice})!"

    other:
      help:
      info:

    roles:
      description: "Adding and removing roles"
      param:
        role: "Discord role"
      errors:
        role_not_found: "No roles found."
      add:
        aliases: "addrole addroles rolesadd"
        description: "Adds roles to the user."
        usage: "roladd <roles (separated by whitespace)>"
        response: "Roles added: %{roles}"
        errors:
          not_found: "No roles found."
      del:
        aliases: "delrole remrole rolerem delroles rolesdel remroles rolesrem"
        description: "Deletes roles from the user."
        usage: "roledel <roles (separated by whitespace)>"
        response: "Roles deleted: %{roles}"
        errors:
          not_found: "No roles found."
      timed_role:
        errors:
          no_roles_given: "Specify at least one role: `-r|--roles Role1 Role2`"
          no_time_given: "Specify some time ranges: `-t|--time weekday-8:00-16:00 weekend-10:00-14:00`"
          time_syntax: "Incorrect time syntax."
          day_syntax: "Incorrect day format."
          id_not_found: "One of the specified IDs not found."
          rule_for_role_exists: "There already is a rule for some of the specified roles."
        add:
          aliases: "timedrole timerole temprole roletime"
          description: "Roles can be set to be active for specified times."
          usage: "addtimedrole -h or --help for help."
          response: "`<ID: %{id}>` Roles %{roles} will be %{mode} during: %{times}."
          help:
            banner: "Usage: addtimedrole [options]"
            times: "Active or inactive times. Days: `mon, tue, wed, thu, fri, sat, sun, weekend, weekday`.
            Format: day-00:00-00:00 day-00:00-00:00 (order being day-start-end)."
            roles: "Roles active for this rule. Separated by whitespace. Format: Role1 Role2 Role3."
            mode: "`Active` or `inactive` times?"
            extra_help: "Examples follow:
            \n„Éª`timedrole -t weekday-8:00-16:00 weekend-10:00-12:00 fri-8:00-14:00 -r Game Game2 -m i`
            will set roles Game and Game2 to be disabled during week days from 8:00 until 16:00
            with the exception of friday (8:00-14:00). On weekends: 10:00-14:00."
        del:
          aliases: "deltimedrole deltimerole deltrole delrolet"
          description: "Deletes timed roles."
          usage: "deltimedrole <ids (integers, separeted by whitespace)>"
          response: "Deleted timed roles: %{ids}."
        list:
          aliases: "timedroles troles listtroles listtimedroles listtimeroles listtimer"
          description: "Lists own timed roles."
          usage: "timedroleslist"
          response: ""
      fool:
      mvp:
      reason:
        error:
          no_user: "No user given."
          no_trophies_found: "No given trophies found."


    reminder:
      add:
        aliases: "remind reminder remadd addrem rem"
        description: "Sets a new reminder."
        usage: "remindme -h or --help for help."
        help:
          banner: "Usage: remindme [options]"
          datetime: "When to remind. Format: yMwdhms OR yyyy/MM/dd hh.mm.ss OR natural language"
          msg: "Message of the reminder."
          repeat: "Interval duration for repeated reminders. Format: dhm (eg. 2d6h20m)"
          extra_help: "Alternatively, `remindme <time (if spaces put ; after this)> <msg>` also works.
          Examples follow:\n„Éª`remindme -d 4M2d8h30s -m Tickets!` will remind you in 4 months, 2 days, 8 hours
          and 30 seconds for 'Tickets!'.\n„Éª`remindme -d 2020/12/22 12:00:00 -m Christmas soon! -r 1y` will remind you
          about christmas on 12/22 12:00:00 every year starting with 2020."
        errors:
          all_blank: "If specifying other options (--m, --r), --d cannot be blank."
        repeat_msg: "repeatedly "
        repeat_interval: "`every %{interval}>`"
      del:
        aliases: "delreminder dontremindme remrem remdel delrem remremind delremind"
        description: "Deletes specified reminders."
        usage: "delreminder <ids or id ranges (e.g. 1-10) separated by space (integer)>"
        response: "Reminder%{plural} deleted: %{ids}."
        errors:
          not_found: "One or more IDs were not found within list of your reminders."
          no_valid_ids: "No valid IDs found."
      mod:
        aliases: "modreminder remindermodify modifyreminder modremind remindmod mr modrem remmod editreminder editrem remedit reminderedit"
        description: "Modifies specified reminder."
        usage: "remindermod -h or --help for help."
        help:
          banner: "Usage: remindermod [-i id] [-d datetime] [-m message] [-r repeat]"
          id: "ID of the reminder to edit."
          datetime: "Edit the time when to remind. Format: yMwdhms OR yyyy/MM/dd hh.mm.ss OR natural language."
          msg: "Edit the message."
          repeat: "Edit the interval duration for repeated reminders. Format: dhm (eg. 2d6h20m)"
          channel: "Edit the channel where you will be reminded. Format: channel id."
          extra_help: "Alternatively, `remindme <time (if spaces put ; after this)> <msg>` also works.
                  Examples follow:\n„Éª`remindme -d 4M2d8h30s -m Tickets!` will remind you in 4 months, 2 days, 8 hours
                  and 30 seconds for 'Tickets!'.\n„Éª`remindme -d 2020/12/22 12:00:00 -m Christmas soon! -r 1y` will remind you
                  about christmas on 12/22 12:00:00 every year starting with 2020."
      details:
        aliases: "reminderdetail reminderinfo inforeminder rinfo"
        description: "Gives details of the specified reminder."
        usage: "reminderdetails <id> <verbose (default off/yes to enable)>"
        param:
          id: "Reminder ID"
      list:
        aliases: "listrem remlist rems"
        description: "Lists user's reminders."
        usage: "reminderlist"

    trigger:
      errors:
        not_found: "No triggers found."
        exact_trigger_already_exists: "Exact trigger with the phrase `?{phrase}` already exists!
        Choose another phrase or use 'any' mode."
        trigger_limit: "You've reached the max limit for triggers (%{limit}).
        List your own triggers with `triggers` and delete some of them with `deltriggers <id(s)>`."
        regex_permissions: "No permissions for the regex mode."
      add:
        aliases: "addtrigger trigger"
        description: "Adds a trigger."
        usage: "triggeradd --help or -h for help."
        help:
          banner: "Usage: triggeradd [options]"
          extra_help: "When a file is attached to the command, that will be used as the response.
          If a phrase and no reply is given, the bot will ask for the reply (text|file) after the command.\n
          Example: `triggeradd -p msg from which the bot triggers -m exact` with an image embedded as a reply.\n
          Example regex matching multiple phrases: `hello world|some words|word`"
      del:
        aliases: "td deltrigger deletetrigger triggerdelete removetrigger
        triggerremove donttrigger remtrigger triggerrem"
        description: "Deletes a trigger."
        usage: "deltrigger <ids separeted by space (integer)>"
        response: "Trigger%{plural} deleted: %{ids}."
        errors:
          not_found: "One or more IDs were not found within list of your triggers."
      stats:
        aliases: "tstats tstat statstrigger stattrigger toptriggers"
        description: "Shows trigger statistics."
        usage: "triggerstats --help or -h for help."
        response: ""
        help:
          banner: "Usage: triggerstats [options]"
          sorting: "Order of result. Ascending when specified, otherwise descending."
          mode: "Mode: any, exact or regex. If none specified, lists all."
          chance: "If specified, triggers will be ordered proportional to their chance."
          type: "Calls when specified, otherwise occurrences."
          extra_help: ""
      mod:
      search:
      details:
      list:
      by_id:
        aliases: "triggerbyid tbi ti trandom randomtrigger"
        description: "Trigger a trigger by its ID. Random if none specified."
        usage: "triggerbyid <id>"
        errors:
          not_found: "Trigger not found."

    japanese:
      description: "Japanese„ÉªÊó•Êú¨Ë™û"
      pitch:
        aliases: "pitch getaccent accent"
        description: "Returns matching pitch accents (NHK) of a given Japanese word"
        usage: "pitch <word (kanji | kana)>"
        response_title: "Accents for %{word}"
        param:
          word: "kanji (Êº¢Â≠ó) or kana („Åã„Å™)"
        errors:
          no_results: "No results."

    feature_request:
      new:
      find:
      tag:

    ask_rin:
      ask:
      answer_add:
